from pathlib import Path
import sys
from docx import Document
from docx.enum.text import WD_COLOR_INDEX
from docx.oxml import OxmlElement

ANNOTATED_SUFFIX = "_annotated"

# ------------------------
# Paragraph insert helper
# ------------------------
def insert_paragraph_after(paragraph, text=None, style=None):
    """
    Insert a paragraph after the given paragraph.
    """
    # Create new paragraph XML element and insert after target paragraph
    new_p = OxmlElement("w:p")
    paragraph._element.addnext(new_p)

    new_para = paragraph._parent.add_paragraph(text or "")
    if style:
        new_para.style = style
    return new_para


# ------------------------
# Comment insertion helper
# ------------------------
def add_comment(doc, snippet, comment):
    """
    Highlight snippet with yellow and add comment text after it.
    """
    snippet_lower = snippet.lower()
    found = False

    for para in doc.paragraphs:
        if snippet_lower and snippet_lower in para.text.lower():
            for run in para.runs:
                if snippet_lower in run.text.lower():
                    run.font.highlight_color = WD_COLOR_INDEX.YELLOW
                    insert_paragraph_after(para, f"[COMMENT] {comment}", style="Intense Quote")
                    found = True
                    break
            if found:
                break
    return found


# ------------------------
# Core function: annotation
# ------------------------
def annotate_document(original_docx, tsv_file):
    """
    Places comments in a DOCX file based on TSV input from red_flag_check output.
    """
    doc = Document(original_docx)
    lines = Path(tsv_file).read_text(encoding="utf-8").splitlines()

    for line in lines:
        if not line.strip():
            continue

        parts = line.split("\t")
        if len(parts) < 3:
            print(f"[WARN] Skipping malformed line: {line}")
            continue

        snippet, issue, law_ref = parts[0], parts[1], parts[2]
        comment_text = f"{issue} | Ref: {law_ref}"

        placed = add_comment(doc, snippet, comment_text)
        if not placed:
            # If snippet is not found in document, add as unplaced comment
            doc.add_paragraph(f"[UNPLACED COMMENT] {comment_text}", style="Intense Quote")

    # Save annotated document
    out_path = str(Path(original_docx).with_name(Path(original_docx).stem + ANNOTATED_SUFFIX + ".docx"))
    doc.save(out_path)
    print(f"[DONE] Annotated DOCX saved: {out_path}")
    return out_path


# ------------------------
# Wrapper for Streamlit UI
# ------------------------
def add_comments_to_doc(input_doc_path, tsv_path, output_doc_path):
    """
    Streamlit wrapper:
    - input_doc_path: original uploaded DOCX file
    - tsv_path: TSV generated by red_flag_check
    - output_doc_path: where to save annotated document
    """
    doc = Document(input_doc_path)
    lines = Path(tsv_path).read_text(encoding="utf-8").splitlines()

    for line in lines:
        if not line.strip():
            continue

        parts = line.split("\t")
        if len(parts) < 3:
            continue

        snippet, issue, law_ref = parts[0], parts[1], parts[2]
        comment_text = f"{issue} | Ref: {law_ref}"

        placed = add_comment(doc, snippet, comment_text)
        if not placed:
            doc.add_paragraph(f"[UNPLACED COMMENT] {comment_text}", style="Intense Quote")

    doc.save(output_doc_path)
    return output_doc_path


# ------------------------
# CLI entry point
# ------------------------
if __name__ == "__main__":
    if len(sys.argv) != 3:
        print(f"Usage: python {sys.argv[0]} original.docx redflag_agent3_input.txt")
        sys.exit(1)

    docx_path = sys.argv[1]
    tsv_path = sys.argv[2]

    if not Path(docx_path).exists():
        print(f"[ERROR] File not found: {docx_path}")
        sys.exit(1)

    if not Path(tsv_path).exists():
        print(f"[ERROR] File not found: {tsv_path}")
        sys.exit(1)

    annotate_document(docx_path, tsv_path)
